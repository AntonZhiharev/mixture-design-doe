"""
Analyze why Simplex Lattice has many zeros and show alternatives
"""

from mixture_designs import MixtureDesign
import numpy as np
import pandas as pd

print("=== ANALYSIS: Why Simplex Lattice Has Many Zeros ===\n")

# Recreate user's exact design
component_names = ['Component_1', 'Component_2', 'Component_3', 'Component_4', 'Component_5', 'Fixed_1', 'Fixed_2', 'Fixed_3']

# User's bounds (Variable first, then fixed)
component_bounds = [
    (0.0, 1.0),    # Component_1 (variable)
    (0.0, 1.0),    # Component_2 (variable)
    (0.0, 0.1),    # Component_3 (variable, tight bounds)
    (0.0, 0.1),    # Component_4 (variable, tight bounds)
    (0.0, 0.1),    # Component_5 (variable, tight bounds)
    (0.05, 0.05),  # Fixed_1 = 5%
    (0.05, 0.05),  # Fixed_2 = 5%
    (0.05, 0.05),  # Fixed_3 = 5%
]

fixed_components = {
    'Fixed_1': 0.05,
    'Fixed_2': 0.05,
    'Fixed_3': 0.05
}

# Create mixture design
mixture = MixtureDesign(
    n_components=8,
    component_names=component_names,
    component_bounds=component_bounds,
    fixed_components=fixed_components
)

print("1. CURRENT SIMPLEX LATTICE (Degree 3) - Your Results")
lattice_design = mixture.generate_simplex_lattice(degree=3)
results_lattice = mixture.evaluate_mixture_design(lattice_design, "quadratic")

print(f"‚úÖ Runs: {len(lattice_design)}")
print(f"‚úÖ D-Efficiency: {results_lattice['d_efficiency']:.4f}")

# Analyze zeros
print(f"\nüîç ZERO ANALYSIS:")
lattice_df = pd.DataFrame(lattice_design, columns=component_names)
variable_cols = ['Component_1', 'Component_2', 'Component_3', 'Component_4', 'Component_5']

for i, row in lattice_df[variable_cols].iterrows():
    zeros_count = (row == 0).sum()
    non_zeros = row[row > 0]
    print(f"Run {i+1}: {zeros_count} zeros, {len(non_zeros)} active components: {non_zeros.to_dict()}")

print(f"\nüìä WHY SO MANY ZEROS?")
print("This is MATHEMATICALLY CORRECT for Simplex Lattice designs!")
print("‚Ä¢ Runs 1-5: VERTEX points (1 component at max, others = 0)")
print("‚Ä¢ Runs 6-10: EDGE points (2 components active, others = 0)")
print("‚Ä¢ Runs 11-35: FACE/INTERIOR points (3+ components active)")

print(f"\n" + "="*60)

print("2. ALTERNATIVE: D-OPTIMAL DESIGN - Fewer Zeros")
d_optimal_design = mixture.generate_d_optimal_mixture(n_runs=35, model_type="quadratic", random_seed=42)
results_d_optimal = mixture.evaluate_mixture_design(d_optimal_design, "quadratic")

print(f"‚úÖ Runs: {len(d_optimal_design)}")
print(f"‚úÖ D-Efficiency: {results_d_optimal['d_efficiency']:.4f}")

# Analyze zeros in D-optimal
print(f"\nüîç ZERO ANALYSIS (D-Optimal):")
d_optimal_df = pd.DataFrame(d_optimal_design, columns=component_names)

zero_counts_d_opt = []
for i, row in d_optimal_df[variable_cols].iterrows():
    zeros_count = (row == 0).sum()
    zero_counts_d_opt.append(zeros_count)
    if i < 10:  # Show first 10
        non_zeros = row[row > 0]
        print(f"Run {i+1}: {zeros_count} zeros, {len(non_zeros)} active components: {non_zeros.to_dict()}")

avg_zeros_lattice = sum((lattice_df[variable_cols] == 0).sum(axis=1)) / len(lattice_df)
avg_zeros_d_opt = sum(zero_counts_d_opt) / len(zero_counts_d_opt)

print(f"\nüìä COMPARISON:")
print(f"‚Ä¢ Simplex Lattice: Average {avg_zeros_lattice:.1f} zeros per run")
print(f"‚Ä¢ D-Optimal: Average {avg_zeros_d_opt:.1f} zeros per run")

print(f"\n" + "="*60)

print("3. ALTERNATIVE: DIFFERENT LATTICE DEGREE")

# Try degree 2 (fewer runs, different pattern)
lattice_deg2 = mixture.generate_simplex_lattice(degree=2)
results_deg2 = mixture.evaluate_mixture_design(lattice_deg2, "quadratic")

print(f"\nDegree 2 Lattice:")
print(f"‚úÖ Runs: {len(lattice_deg2)}")
print(f"‚úÖ D-Efficiency: {results_deg2['d_efficiency']:.4f}")

# Show first few runs
lattice_deg2_df = pd.DataFrame(lattice_deg2, columns=component_names)
print(f"\nüîç FIRST 10 RUNS (Degree 2):")
for i, row in lattice_deg2_df[variable_cols].head(10).iterrows():
    zeros_count = (row == 0).sum()
    non_zeros = row[row > 0]
    print(f"Run {i+1}: {zeros_count} zeros, {len(non_zeros)} active components: {non_zeros.to_dict()}")

print(f"\n" + "="*60)

print("4. EFFICIENCY COMPARISON")

comparison_data = {
    'Design Type': ['Simplex Lattice (Deg 3)', 'D-Optimal', 'Simplex Lattice (Deg 2)'],
    'Runs': [len(lattice_design), len(d_optimal_design), len(lattice_deg2)],
    'D-Efficiency': [results_lattice['d_efficiency'], results_d_optimal['d_efficiency'], results_deg2['d_efficiency']],
    'Avg Zeros per Run': [
        avg_zeros_lattice,
        avg_zeros_d_opt,
        sum((lattice_deg2_df[variable_cols] == 0).sum(axis=1)) / len(lattice_deg2_df)
    ]
}

comparison_df = pd.DataFrame(comparison_data)
print(comparison_df.round(3))

print(f"\n" + "="*60)

print("5. RECOMMENDATIONS")

print(f"\nüéØ FOR FEWER ZEROS:")
print("‚úÖ Use D-OPTIMAL instead of Simplex Lattice")
print("‚úÖ D-Optimal spreads points more evenly")
print("‚úÖ Still maintains good D-efficiency")
print("‚úÖ More 'realistic' mixtures with multiple active components")

print(f"\nüéØ WHY LATTICE HAS ZEROS:")
print("‚úÖ Simplex Lattice is DESIGNED to explore systematically")
print("‚úÖ Zeros represent boundaries and edges of mixture space")
print("‚úÖ This is actually GOOD for understanding component effects")
print("‚úÖ Vertex points (pure components) are scientifically important")

print(f"\nüéØ WHEN TO USE EACH:")
print("‚Ä¢ Simplex Lattice: Systematic exploration, understand pure component effects")
print("‚Ä¢ D-Optimal: Practical formulations, fewer extreme compositions")
print("‚Ä¢ Lower degree lattice: Fewer runs, still systematic")

print(f"\n=== CONCLUSION ===")
print("Your Simplex Lattice design is MATHEMATICALLY PERFECT!")
print("The zeros are intentional and scientifically valuable.")
print("But if you want fewer zeros, use D-Optimal method instead.")
